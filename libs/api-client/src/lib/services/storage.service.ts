/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { FileDto } from '../models/file-dto';
import { s3StorageControllerDeleteFile } from '../fn/storage/s-3-storage-controller-delete-file';
import { S3StorageControllerDeleteFile$Params } from '../fn/storage/s-3-storage-controller-delete-file';
import { s3StorageControllerDeleteMany } from '../fn/storage/s-3-storage-controller-delete-many';
import { S3StorageControllerDeleteMany$Params } from '../fn/storage/s-3-storage-controller-delete-many';
import { s3StorageControllerUploadFiles } from '../fn/storage/s-3-storage-controller-upload-files';
import { S3StorageControllerUploadFiles$Params } from '../fn/storage/s-3-storage-controller-upload-files';

@Injectable({ providedIn: 'root' })
export class StorageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `s3StorageControllerUploadFiles()` */
  static readonly S3StorageControllerUploadFilesPath = '/storage';

  /**
   * 파일 업로드.
   *
   * 파일을 업로드합니다
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `s3StorageControllerUploadFiles()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  s3StorageControllerUploadFiles$Response(params: S3StorageControllerUploadFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FileDto>>> {
    return s3StorageControllerUploadFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * 파일 업로드.
   *
   * 파일을 업로드합니다
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `s3StorageControllerUploadFiles$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  s3StorageControllerUploadFiles(params: S3StorageControllerUploadFiles$Params, context?: HttpContext): Observable<Array<FileDto>> {
    return this.s3StorageControllerUploadFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FileDto>>): Array<FileDto> => r.body)
    );
  }

  /** Path part for operation `s3StorageControllerDeleteMany()` */
  static readonly S3StorageControllerDeleteManyPath = '/storage';

  /**
   * 여러 파일 삭제.
   *
   * 여러 파일을 삭제합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `s3StorageControllerDeleteMany()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  s3StorageControllerDeleteMany$Response(params: S3StorageControllerDeleteMany$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'count'?: number;
}>> {
    return s3StorageControllerDeleteMany(this.http, this.rootUrl, params, context);
  }

  /**
   * 여러 파일 삭제.
   *
   * 여러 파일을 삭제합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `s3StorageControllerDeleteMany$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  s3StorageControllerDeleteMany(params: S3StorageControllerDeleteMany$Params, context?: HttpContext): Observable<{
'count'?: number;
}> {
    return this.s3StorageControllerDeleteMany$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'count'?: number;
}>): {
'count'?: number;
} => r.body)
    );
  }

  /** Path part for operation `s3StorageControllerDeleteFile()` */
  static readonly S3StorageControllerDeleteFilePath = '/storage/{url}';

  /**
   * 파일 삭제.
   *
   * 파일을 삭제합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `s3StorageControllerDeleteFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  s3StorageControllerDeleteFile$Response(params: S3StorageControllerDeleteFile$Params, context?: HttpContext): Observable<StrictHttpResponse<FileDto>> {
    return s3StorageControllerDeleteFile(this.http, this.rootUrl, params, context);
  }

  /**
   * 파일 삭제.
   *
   * 파일을 삭제합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `s3StorageControllerDeleteFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  s3StorageControllerDeleteFile(params: S3StorageControllerDeleteFile$Params, context?: HttpContext): Observable<FileDto> {
    return this.s3StorageControllerDeleteFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<FileDto>): FileDto => r.body)
    );
  }

}
