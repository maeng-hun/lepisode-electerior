/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { inquiryControllerCreate } from '../fn/inquiries/inquiry-controller-create';
import { InquiryControllerCreate$Params } from '../fn/inquiries/inquiry-controller-create';
import { inquiryControllerDelete } from '../fn/inquiries/inquiry-controller-delete';
import { InquiryControllerDelete$Params } from '../fn/inquiries/inquiry-controller-delete';
import { inquiryControllerGet } from '../fn/inquiries/inquiry-controller-get';
import { InquiryControllerGet$Params } from '../fn/inquiries/inquiry-controller-get';
import { inquiryControllerGetAll } from '../fn/inquiries/inquiry-controller-get-all';
import { InquiryControllerGetAll$Params } from '../fn/inquiries/inquiry-controller-get-all';
import { inquiryControllerUpdateStatus } from '../fn/inquiries/inquiry-controller-update-status';
import { InquiryControllerUpdateStatus$Params } from '../fn/inquiries/inquiry-controller-update-status';
import { InquiryResponseDto } from '../models/inquiry-response-dto';

@Injectable({ providedIn: 'root' })
export class InquiriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `inquiryControllerGetAll()` */
  static readonly InquiryControllerGetAllPath = '/inquiries';

  /**
   * 전체 문의 조회.
   *
   * 관리자 권한으로 모든 문의 내역을 최신순으로 조회합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inquiryControllerGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  inquiryControllerGetAll$Response(params?: InquiryControllerGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InquiryResponseDto>>> {
    return inquiryControllerGetAll(this.http, this.rootUrl, params, context);
  }

  /**
   * 전체 문의 조회.
   *
   * 관리자 권한으로 모든 문의 내역을 최신순으로 조회합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inquiryControllerGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inquiryControllerGetAll(params?: InquiryControllerGetAll$Params, context?: HttpContext): Observable<Array<InquiryResponseDto>> {
    return this.inquiryControllerGetAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InquiryResponseDto>>): Array<InquiryResponseDto> => r.body)
    );
  }

  /** Path part for operation `inquiryControllerCreate()` */
  static readonly InquiryControllerCreatePath = '/inquiries';

  /**
   * 사용자 문의 등록.
   *
   * 사용자가 문의 내용을 등록하고, 필요 시 여러 이미지 파일을 업로드할 수 있습니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inquiryControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inquiryControllerCreate$Response(params: InquiryControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return inquiryControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * 사용자 문의 등록.
   *
   * 사용자가 문의 내용을 등록하고, 필요 시 여러 이미지 파일을 업로드할 수 있습니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inquiryControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inquiryControllerCreate(params: InquiryControllerCreate$Params, context?: HttpContext): Observable<boolean> {
    return this.inquiryControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `inquiryControllerGet()` */
  static readonly InquiryControllerGetPath = '/inquiries/{id}';

  /**
   * 단일 문의 조회.
   *
   * 관리자 권한으로 특정 문의 ID를 이용해 문의 내용을 조회합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inquiryControllerGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  inquiryControllerGet$Response(params: InquiryControllerGet$Params, context?: HttpContext): Observable<StrictHttpResponse<InquiryResponseDto>> {
    return inquiryControllerGet(this.http, this.rootUrl, params, context);
  }

  /**
   * 단일 문의 조회.
   *
   * 관리자 권한으로 특정 문의 ID를 이용해 문의 내용을 조회합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inquiryControllerGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inquiryControllerGet(params: InquiryControllerGet$Params, context?: HttpContext): Observable<InquiryResponseDto> {
    return this.inquiryControllerGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<InquiryResponseDto>): InquiryResponseDto => r.body)
    );
  }

  /** Path part for operation `inquiryControllerDelete()` */
  static readonly InquiryControllerDeletePath = '/inquiries/{id}';

  /**
   * 문의 삭제.
   *
   * 관리자 권한으로 특정 문의를 삭제합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inquiryControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  inquiryControllerDelete$Response(params: InquiryControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return inquiryControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 문의 삭제.
   *
   * 관리자 권한으로 특정 문의를 삭제합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inquiryControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inquiryControllerDelete(params: InquiryControllerDelete$Params, context?: HttpContext): Observable<boolean> {
    return this.inquiryControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `inquiryControllerUpdateStatus()` */
  static readonly InquiryControllerUpdateStatusPath = '/inquiries/{id}';

  /**
   * 문의 상태 업데이트.
   *
   * 관리자 권한으로 특정 문의의 상태를 변경합니다 (isPending).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inquiryControllerUpdateStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inquiryControllerUpdateStatus$Response(params: InquiryControllerUpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return inquiryControllerUpdateStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * 문의 상태 업데이트.
   *
   * 관리자 권한으로 특정 문의의 상태를 변경합니다 (isPending).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inquiryControllerUpdateStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inquiryControllerUpdateStatus(params: InquiryControllerUpdateStatus$Params, context?: HttpContext): Observable<boolean> {
    return this.inquiryControllerUpdateStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
