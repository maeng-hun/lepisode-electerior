/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { businessInfoControllerCreate } from '../fn/business-info/business-info-controller-create';
import { BusinessInfoControllerCreate$Params } from '../fn/business-info/business-info-controller-create';
import { businessInfoControllerDelete } from '../fn/business-info/business-info-controller-delete';
import { BusinessInfoControllerDelete$Params } from '../fn/business-info/business-info-controller-delete';
import { businessInfoControllerDeleteLogo } from '../fn/business-info/business-info-controller-delete-logo';
import { BusinessInfoControllerDeleteLogo$Params } from '../fn/business-info/business-info-controller-delete-logo';
import { businessInfoControllerGet } from '../fn/business-info/business-info-controller-get';
import { BusinessInfoControllerGet$Params } from '../fn/business-info/business-info-controller-get';
import { businessInfoControllerUpdate } from '../fn/business-info/business-info-controller-update';
import { BusinessInfoControllerUpdate$Params } from '../fn/business-info/business-info-controller-update';
import { BusinessInfoResponseDto } from '../models/business-info-response-dto';

@Injectable({ providedIn: 'root' })
export class BusinessInfoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `businessInfoControllerGet()` */
  static readonly BusinessInfoControllerGetPath = '/business-info';

  /**
   * 사업자 정보 조회.
   *
   * 등록된 사업자 정보를 조회합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessInfoControllerGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessInfoControllerGet$Response(params?: BusinessInfoControllerGet$Params, context?: HttpContext): Observable<StrictHttpResponse<BusinessInfoResponseDto>> {
    return businessInfoControllerGet(this.http, this.rootUrl, params, context);
  }

  /**
   * 사업자 정보 조회.
   *
   * 등록된 사업자 정보를 조회합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessInfoControllerGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessInfoControllerGet(params?: BusinessInfoControllerGet$Params, context?: HttpContext): Observable<BusinessInfoResponseDto> {
    return this.businessInfoControllerGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<BusinessInfoResponseDto>): BusinessInfoResponseDto => r.body)
    );
  }

  /** Path part for operation `businessInfoControllerCreate()` */
  static readonly BusinessInfoControllerCreatePath = '/business-info';

  /**
   * 사업자 정보 생성.
   *
   * 관리자 권한으로 사업자 정보를 생성합니다. 필요 시 로고 이미지도 업로드 가능합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessInfoControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessInfoControllerCreate$Response(params: BusinessInfoControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return businessInfoControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * 사업자 정보 생성.
   *
   * 관리자 권한으로 사업자 정보를 생성합니다. 필요 시 로고 이미지도 업로드 가능합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessInfoControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessInfoControllerCreate(params: BusinessInfoControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.businessInfoControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `businessInfoControllerDelete()` */
  static readonly BusinessInfoControllerDeletePath = '/business-info';

  /**
   * 사업자 정보 삭제.
   *
   * 관리자 권한으로 등록된 사업자 정보를 삭제합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessInfoControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessInfoControllerDelete$Response(params?: BusinessInfoControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return businessInfoControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 사업자 정보 삭제.
   *
   * 관리자 권한으로 등록된 사업자 정보를 삭제합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessInfoControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessInfoControllerDelete(params?: BusinessInfoControllerDelete$Params, context?: HttpContext): Observable<boolean> {
    return this.businessInfoControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `businessInfoControllerUpdate()` */
  static readonly BusinessInfoControllerUpdatePath = '/business-info';

  /**
   * 사업자 정보 수정.
   *
   * 관리자 권한으로 사업자 정보를 수정합니다. 필요 시 로고 이미지도 교체 가능합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessInfoControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessInfoControllerUpdate$Response(params: BusinessInfoControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return businessInfoControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * 사업자 정보 수정.
   *
   * 관리자 권한으로 사업자 정보를 수정합니다. 필요 시 로고 이미지도 교체 가능합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessInfoControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  businessInfoControllerUpdate(params: BusinessInfoControllerUpdate$Params, context?: HttpContext): Observable<boolean> {
    return this.businessInfoControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `businessInfoControllerDeleteLogo()` */
  static readonly BusinessInfoControllerDeleteLogoPath = '/business-info/storage';

  /**
   * 사업자 로고 삭제.
   *
   * 관리자 권한으로 유일한 사업자 로고 이미지를 삭제합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `businessInfoControllerDeleteLogo()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessInfoControllerDeleteLogo$Response(params?: BusinessInfoControllerDeleteLogo$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'message'?: string;
}>> {
    return businessInfoControllerDeleteLogo(this.http, this.rootUrl, params, context);
  }

  /**
   * 사업자 로고 삭제.
   *
   * 관리자 권한으로 유일한 사업자 로고 이미지를 삭제합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `businessInfoControllerDeleteLogo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  businessInfoControllerDeleteLogo(params?: BusinessInfoControllerDeleteLogo$Params, context?: HttpContext): Observable<{
'message'?: string;
}> {
    return this.businessInfoControllerDeleteLogo$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'message'?: string;
}>): {
'message'?: string;
} => r.body)
    );
  }

}
