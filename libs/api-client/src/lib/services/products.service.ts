/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { productControllerCreate } from '../fn/products/product-controller-create';
import { ProductControllerCreate$Params } from '../fn/products/product-controller-create';
import { productControllerDelete } from '../fn/products/product-controller-delete';
import { ProductControllerDelete$Params } from '../fn/products/product-controller-delete';
import { productControllerDeleteImage } from '../fn/products/product-controller-delete-image';
import { ProductControllerDeleteImage$Params } from '../fn/products/product-controller-delete-image';
import { productControllerGet } from '../fn/products/product-controller-get';
import { ProductControllerGet$Params } from '../fn/products/product-controller-get';
import { productControllerGetAll } from '../fn/products/product-controller-get-all';
import { ProductControllerGetAll$Params } from '../fn/products/product-controller-get-all';
import { productControllerUpdate } from '../fn/products/product-controller-update';
import { ProductControllerUpdate$Params } from '../fn/products/product-controller-update';
import { productControllerUpdateOrders } from '../fn/products/product-controller-update-orders';
import { ProductControllerUpdateOrders$Params } from '../fn/products/product-controller-update-orders';
import { ProductResponseDto } from '../models/product-response-dto';

@Injectable({ providedIn: 'root' })
export class ProductsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productControllerGetAll()` */
  static readonly ProductControllerGetAllPath = '/products';

  /**
   * 모든 제품 조회.
   *
   * 등록된 모든 제품 목록을 반환합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerGetAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerGetAll$Response(params?: ProductControllerGetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductResponseDto>>> {
    return productControllerGetAll(this.http, this.rootUrl, params, context);
  }

  /**
   * 모든 제품 조회.
   *
   * 등록된 모든 제품 목록을 반환합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerGetAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerGetAll(params?: ProductControllerGetAll$Params, context?: HttpContext): Observable<Array<ProductResponseDto>> {
    return this.productControllerGetAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductResponseDto>>): Array<ProductResponseDto> => r.body)
    );
  }

  /** Path part for operation `productControllerCreate()` */
  static readonly ProductControllerCreatePath = '/products';

  /**
   * 새 제품 등록.
   *
   * 새로운 제품 등록 및 이미지 업로드 가능
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerCreate$Response(params: ProductControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * 새 제품 등록.
   *
   * 새로운 제품 등록 및 이미지 업로드 가능
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerCreate(params: ProductControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.productControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productControllerGet()` */
  static readonly ProductControllerGetPath = '/products/{id}';

  /**
   * 제품 상세 조회.
   *
   * 제품 ID를 이용해 해당 제품 상세 정보를 반환합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerGet$Response(params: ProductControllerGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponseDto>> {
    return productControllerGet(this.http, this.rootUrl, params, context);
  }

  /**
   * 제품 상세 조회.
   *
   * 제품 ID를 이용해 해당 제품 상세 정보를 반환합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerGet(params: ProductControllerGet$Params, context?: HttpContext): Observable<ProductResponseDto> {
    return this.productControllerGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponseDto>): ProductResponseDto => r.body)
    );
  }

  /** Path part for operation `productControllerDelete()` */
  static readonly ProductControllerDeletePath = '/products/{id}';

  /**
   * 제품 삭제.
   *
   * 제품 ID를 이용해 특정 제품 삭제
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerDelete$Response(params: ProductControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return productControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 제품 삭제.
   *
   * 제품 ID를 이용해 특정 제품 삭제
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerDelete(params: ProductControllerDelete$Params, context?: HttpContext): Observable<boolean> {
    return this.productControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `productControllerUpdate()` */
  static readonly ProductControllerUpdatePath = '/products/{id}';

  /**
   * 제품 수정.
   *
   * 제품 ID를 이용해 특정 제품 수정 및 이미지 교체 가능
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerUpdate$Response(params: ProductControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return productControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * 제품 수정.
   *
   * 제품 ID를 이용해 특정 제품 수정 및 이미지 교체 가능
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productControllerUpdate(params: ProductControllerUpdate$Params, context?: HttpContext): Observable<boolean> {
    return this.productControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `productControllerUpdateOrders()` */
  static readonly ProductControllerUpdateOrdersPath = '/products/orders';

  /**
   * 제품 순서 변경.
   *
   * 여러 제품의 노출 순서를 일괄적으로 변경합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerUpdateOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerUpdateOrders$Response(params?: ProductControllerUpdateOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return productControllerUpdateOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * 제품 순서 변경.
   *
   * 여러 제품의 노출 순서를 일괄적으로 변경합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerUpdateOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerUpdateOrders(params?: ProductControllerUpdateOrders$Params, context?: HttpContext): Observable<boolean> {
    return this.productControllerUpdateOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `productControllerDeleteImage()` */
  static readonly ProductControllerDeleteImagePath = '/products/{id}/storage';

  /**
   * 제품 이미지 삭제.
   *
   * 제품 ID를 이용해 연결된 이미지 삭제
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productControllerDeleteImage()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerDeleteImage$Response(params: ProductControllerDeleteImage$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return productControllerDeleteImage(this.http, this.rootUrl, params, context);
  }

  /**
   * 제품 이미지 삭제.
   *
   * 제품 ID를 이용해 연결된 이미지 삭제
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productControllerDeleteImage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productControllerDeleteImage(params: ProductControllerDeleteImage$Params, context?: HttpContext): Observable<boolean> {
    return this.productControllerDeleteImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
