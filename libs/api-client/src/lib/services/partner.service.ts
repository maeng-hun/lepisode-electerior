/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { partnerControllerCreate } from '../fn/partner/partner-controller-create';
import { PartnerControllerCreate$Params } from '../fn/partner/partner-controller-create';
import { partnerControllerDelete } from '../fn/partner/partner-controller-delete';
import { PartnerControllerDelete$Params } from '../fn/partner/partner-controller-delete';
import { partnerControllerFindMany } from '../fn/partner/partner-controller-find-many';
import { PartnerControllerFindMany$Params } from '../fn/partner/partner-controller-find-many';
import { partnerControllerFindUnique } from '../fn/partner/partner-controller-find-unique';
import { PartnerControllerFindUnique$Params } from '../fn/partner/partner-controller-find-unique';
import { partnerControllerUpdate } from '../fn/partner/partner-controller-update';
import { PartnerControllerUpdate$Params } from '../fn/partner/partner-controller-update';

@Injectable({ providedIn: 'root' })
export class PartnerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partnerControllerFindMany()` */
  static readonly PartnerControllerFindManyPath = '/partner';

  /**
   * 협력사 목록 전체 조회.
   *
   * 협력사 목록 전체를 조회합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partnerControllerFindMany()` instead.
   *
   * This method doesn't expect any request body.
   */
  partnerControllerFindMany$Response(params?: PartnerControllerFindMany$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return partnerControllerFindMany(this.http, this.rootUrl, params, context);
  }

  /**
   * 협력사 목록 전체 조회.
   *
   * 협력사 목록 전체를 조회합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partnerControllerFindMany$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partnerControllerFindMany(params?: PartnerControllerFindMany$Params, context?: HttpContext): Observable<void> {
    return this.partnerControllerFindMany$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `partnerControllerCreate()` */
  static readonly PartnerControllerCreatePath = '/partner';

  /**
   * 협력사 정보 등록.
   *
   * 협력사를 등록합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partnerControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partnerControllerCreate$Response(params: PartnerControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return partnerControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * 협력사 정보 등록.
   *
   * 협력사를 등록합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partnerControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partnerControllerCreate(params: PartnerControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.partnerControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `partnerControllerFindUnique()` */
  static readonly PartnerControllerFindUniquePath = '/partner/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partnerControllerFindUnique()` instead.
   *
   * This method doesn't expect any request body.
   */
  partnerControllerFindUnique$Response(params: PartnerControllerFindUnique$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return partnerControllerFindUnique(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partnerControllerFindUnique$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partnerControllerFindUnique(params: PartnerControllerFindUnique$Params, context?: HttpContext): Observable<void> {
    return this.partnerControllerFindUnique$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `partnerControllerDelete()` */
  static readonly PartnerControllerDeletePath = '/partner/{id}';

  /**
   * 협력사 정보 삭제.
   *
   * 협력사 정보를 삭제합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partnerControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  partnerControllerDelete$Response(params: PartnerControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return partnerControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 협력사 정보 삭제.
   *
   * 협력사 정보를 삭제합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partnerControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partnerControllerDelete(params: PartnerControllerDelete$Params, context?: HttpContext): Observable<void> {
    return this.partnerControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `partnerControllerUpdate()` */
  static readonly PartnerControllerUpdatePath = '/partner/{id}';

  /**
   * 협력사 정보 수정.
   *
   * 협력사 정보를 수정합니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partnerControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partnerControllerUpdate$Response(params: PartnerControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return partnerControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * 협력사 정보 수정.
   *
   * 협력사 정보를 수정합니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partnerControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partnerControllerUpdate(params: PartnerControllerUpdate$Params, context?: HttpContext): Observable<void> {
    return this.partnerControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
