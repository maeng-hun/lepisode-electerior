/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { portfolioControllerCreate } from '../fn/portfolios/portfolio-controller-create';
import { PortfolioControllerCreate$Params } from '../fn/portfolios/portfolio-controller-create';
import { portfolioControllerDelete } from '../fn/portfolios/portfolio-controller-delete';
import { PortfolioControllerDelete$Params } from '../fn/portfolios/portfolio-controller-delete';
import { portfolioControllerDeleteImage } from '../fn/portfolios/portfolio-controller-delete-image';
import { PortfolioControllerDeleteImage$Params } from '../fn/portfolios/portfolio-controller-delete-image';
import { portfolioControllerFindMany } from '../fn/portfolios/portfolio-controller-find-many';
import { PortfolioControllerFindMany$Params } from '../fn/portfolios/portfolio-controller-find-many';
import { portfolioControllerFindUnique } from '../fn/portfolios/portfolio-controller-find-unique';
import { PortfolioControllerFindUnique$Params } from '../fn/portfolios/portfolio-controller-find-unique';
import { portfolioControllerIncrementViews } from '../fn/portfolios/portfolio-controller-increment-views';
import { PortfolioControllerIncrementViews$Params } from '../fn/portfolios/portfolio-controller-increment-views';
import { portfolioControllerUpdate } from '../fn/portfolios/portfolio-controller-update';
import { PortfolioControllerUpdate$Params } from '../fn/portfolios/portfolio-controller-update';
import { portfolioControllerUpdateOrders } from '../fn/portfolios/portfolio-controller-update-orders';
import { PortfolioControllerUpdateOrders$Params } from '../fn/portfolios/portfolio-controller-update-orders';
import { PortfolioResponseDto } from '../models/portfolio-response-dto';

@Injectable({ providedIn: 'root' })
export class PortfoliosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `portfolioControllerFindMany()` */
  static readonly PortfolioControllerFindManyPath = '/portfolios';

  /**
   * 모든 포트폴리오 조회, 포트폴리오 검색.
   *
   * 포트폴리오 전체 목록 반환
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerFindMany()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerFindMany$Response(params: PortfolioControllerFindMany$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PortfolioResponseDto>>> {
    return portfolioControllerFindMany(this.http, this.rootUrl, params, context);
  }

  /**
   * 모든 포트폴리오 조회, 포트폴리오 검색.
   *
   * 포트폴리오 전체 목록 반환
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerFindMany$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerFindMany(params: PortfolioControllerFindMany$Params, context?: HttpContext): Observable<Array<PortfolioResponseDto>> {
    return this.portfolioControllerFindMany$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PortfolioResponseDto>>): Array<PortfolioResponseDto> => r.body)
    );
  }

  /** Path part for operation `portfolioControllerCreate()` */
  static readonly PortfolioControllerCreatePath = '/portfolios';

  /**
   * 포트폴리오 등록11111.
   *
   * 새로운 포트폴리오 등록 및 이미지 업로드
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  portfolioControllerCreate$Response(params: PortfolioControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return portfolioControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 등록11111.
   *
   * 새로운 포트폴리오 등록 및 이미지 업로드
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  portfolioControllerCreate(params: PortfolioControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.portfolioControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `portfolioControllerFindUnique()` */
  static readonly PortfolioControllerFindUniquePath = '/portfolios/{id}';

  /**
   * 포트폴리오 상세 조회.
   *
   * 포티폴리오 상세 정보 반환
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerFindUnique()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerFindUnique$Response(params: PortfolioControllerFindUnique$Params, context?: HttpContext): Observable<StrictHttpResponse<PortfolioResponseDto>> {
    return portfolioControllerFindUnique(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 상세 조회.
   *
   * 포티폴리오 상세 정보 반환
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerFindUnique$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerFindUnique(params: PortfolioControllerFindUnique$Params, context?: HttpContext): Observable<PortfolioResponseDto> {
    return this.portfolioControllerFindUnique$Response(params, context).pipe(
      map((r: StrictHttpResponse<PortfolioResponseDto>): PortfolioResponseDto => r.body)
    );
  }

  /** Path part for operation `portfolioControllerDelete()` */
  static readonly PortfolioControllerDeletePath = '/portfolios/{id}';

  /**
   * 포트폴리오 삭제.
   *
   * 해당 id 포트폴리오를 삭제
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerDelete$Response(params: PortfolioControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return portfolioControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 삭제.
   *
   * 해당 id 포트폴리오를 삭제
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerDelete(params: PortfolioControllerDelete$Params, context?: HttpContext): Observable<boolean> {
    return this.portfolioControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `portfolioControllerUpdate()` */
  static readonly PortfolioControllerUpdatePath = '/portfolios/{id}';

  /**
   * 포트폴리오 수정.
   *
   * 해당 id 포트폴리오 수정 및 이미지 교체
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  portfolioControllerUpdate$Response(params: PortfolioControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return portfolioControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 수정.
   *
   * 해당 id 포트폴리오 수정 및 이미지 교체
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  portfolioControllerUpdate(params: PortfolioControllerUpdate$Params, context?: HttpContext): Observable<boolean> {
    return this.portfolioControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `portfolioControllerUpdateOrders()` */
  static readonly PortfolioControllerUpdateOrdersPath = '/portfolios/orders';

  /**
   * 포트폴리오 순서 변경.
   *
   * 여러 포트폴리오의 노출 순서를 일괄적으로 변경
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerUpdateOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerUpdateOrders$Response(params?: PortfolioControllerUpdateOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return portfolioControllerUpdateOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 순서 변경.
   *
   * 여러 포트폴리오의 노출 순서를 일괄적으로 변경
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerUpdateOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerUpdateOrders(params?: PortfolioControllerUpdateOrders$Params, context?: HttpContext): Observable<boolean> {
    return this.portfolioControllerUpdateOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `portfolioControllerIncrementViews()` */
  static readonly PortfolioControllerIncrementViewsPath = '/portfolios/{id}/views';

  /**
   * 포트폴리오 조회수 증가.
   *
   * 해당 id 포트폴리오 조회수를 증가
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerIncrementViews()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerIncrementViews$Response(params: PortfolioControllerIncrementViews$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return portfolioControllerIncrementViews(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 조회수 증가.
   *
   * 해당 id 포트폴리오 조회수를 증가
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerIncrementViews$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerIncrementViews(params: PortfolioControllerIncrementViews$Params, context?: HttpContext): Observable<void> {
    return this.portfolioControllerIncrementViews$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `portfolioControllerDeleteImage()` */
  static readonly PortfolioControllerDeleteImagePath = '/portfolios/{id}/storage';

  /**
   * 포트폴리오 이미지 삭제.
   *
   * 해당 id 포트폴리오 이미지 삭제
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `portfolioControllerDeleteImage()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerDeleteImage$Response(params: PortfolioControllerDeleteImage$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return portfolioControllerDeleteImage(this.http, this.rootUrl, params, context);
  }

  /**
   * 포트폴리오 이미지 삭제.
   *
   * 해당 id 포트폴리오 이미지 삭제
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `portfolioControllerDeleteImage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  portfolioControllerDeleteImage(params: PortfolioControllerDeleteImage$Params, context?: HttpContext): Observable<boolean> {
    return this.portfolioControllerDeleteImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
