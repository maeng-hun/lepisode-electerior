/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authControllerLogout } from '../fn/auth/auth-controller-logout';
import { AuthControllerLogout$Params } from '../fn/auth/auth-controller-logout';
import { authControllerMe } from '../fn/auth/auth-controller-me';
import { AuthControllerMe$Params } from '../fn/auth/auth-controller-me';
import { authControllerRefresh } from '../fn/auth/auth-controller-refresh';
import { AuthControllerRefresh$Params } from '../fn/auth/auth-controller-refresh';
import { authControllerSignin } from '../fn/auth/auth-controller-signin';
import { AuthControllerSignin$Params } from '../fn/auth/auth-controller-signin';
import { authControllerSignup } from '../fn/auth/auth-controller-signup';
import { AuthControllerSignup$Params } from '../fn/auth/auth-controller-signup';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authControllerMe()` */
  static readonly AuthControllerMePath = '/auth/me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerMe()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerMe$Response(params?: AuthControllerMe$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authControllerMe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerMe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerMe(params?: AuthControllerMe$Params, context?: HttpContext): Observable<void> {
    return this.authControllerMe$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authControllerSignup()` */
  static readonly AuthControllerSignupPath = '/auth/signup';

  /**
   * 회원가입.
   *
   * 회원가입을 진행하기 위한 코드입니다.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerSignup()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerSignup$Response(params: AuthControllerSignup$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authControllerSignup(this.http, this.rootUrl, params, context);
  }

  /**
   * 회원가입.
   *
   * 회원가입을 진행하기 위한 코드입니다.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerSignup$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerSignup(params: AuthControllerSignup$Params, context?: HttpContext): Observable<void> {
    return this.authControllerSignup$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authControllerSignin()` */
  static readonly AuthControllerSigninPath = '/auth/signin';

  /**
   * 로그인.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerSignin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerSignin$Response(params: AuthControllerSignin$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authControllerSignin(this.http, this.rootUrl, params, context);
  }

  /**
   * 로그인.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerSignin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerSignin(params: AuthControllerSignin$Params, context?: HttpContext): Observable<any> {
    return this.authControllerSignin$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `authControllerRefresh()` */
  static readonly AuthControllerRefreshPath = '/auth/refresh';

  /**
   * 토큰 재발급.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerRefresh()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerRefresh$Response(params?: AuthControllerRefresh$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authControllerRefresh(this.http, this.rootUrl, params, context);
  }

  /**
   * 토큰 재발급.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerRefresh$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerRefresh(params?: AuthControllerRefresh$Params, context?: HttpContext): Observable<void> {
    return this.authControllerRefresh$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authControllerLogout()` */
  static readonly AuthControllerLogoutPath = '/auth/logout';

  /**
   * 로그아웃.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerLogout()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerLogout$Response(params?: AuthControllerLogout$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authControllerLogout(this.http, this.rootUrl, params, context);
  }

  /**
   * 로그아웃.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerLogout$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerLogout(params?: AuthControllerLogout$Params, context?: HttpContext): Observable<void> {
    return this.authControllerLogout$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
